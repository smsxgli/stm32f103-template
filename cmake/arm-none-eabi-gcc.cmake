set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)

find_program(CROSS_GCC_PATH "arm-none-eabi-gcc")
get_filename_component(CROSS_TOOLCHAIN_PATH ${CROSS_GCC_PATH} PATH)

set(CMAKE_C_COMPILER ${CROSS_TOOLCHAIN_PATH}/arm-none-eabi-gcc)
set(CMAKE_CXX_COMPILER ${CROSS_TOOLCHAIN_PATH}/arm-none-eabi-g++)
set(CMAKE_OBJCOPY ${CROSS_TOOLCHAIN_PATH}/arm-none-eabi-objcopy)
set(CMAKE_SIZE ${CROSS_TOOLCHAIN_PATH}/arm-none-eabi-size)

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
# Without that flag CMake is not able to pass test compilation check
set(CMAKE_TRY_COMPILE_TARGET_TYPE   STATIC_LIBRARY)